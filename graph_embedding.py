import networkx as nx
import pygraphviz as pgv
from node2vec import Node2Vec

dot_path = 'ConfigPropertyLoader.java.dot'
# read graph from dot file
A = pgv.AGraph(dot_path)

# convert to networkx graph
graph = nx.nx_agraph.from_agraph(A)
# graph中的节点是字符串，需要转换成整数
graph = nx.relabel.convert_node_labels_to_integers(graph)

node2Vec = Node2Vec(graph, dimensions=64, walk_length=30, num_walks=200, workers=4)

model = node2Vec.fit(window=10, min_count=1, batch_words=4)

print(model.wv.most_similar('5'))

model.wv.save_word2vec_format('node2vec.emb')

model.save('node2vec.model')

from node2vec.edges import HadamardEmbedder

edges_embs = HadamardEmbedder(keyed_vectors=model.wv)

print(edges_embs[('84', '85')])

edges_kv = edges_embs.as_keyed_vectors()

edges_kv.most_similar(str(('84', '85')))

edges_kv.save_word2vec_format('edges.emb')
